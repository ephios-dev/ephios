# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, ephios-dev
# This file is distributed under the same license as the ephios package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: ephios \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-18 16:44+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../development/contributing.rst:2
msgid "Contributing"
msgstr ""

#: ../../development/contributing.rst:4
msgid ""
"Contributions to ephios are welcome. If you want to see what we are "
"currently up to, check the available `issues <https://github.com/ephios-"
"dev/ephios/issues>`_."
msgstr ""

#: ../../development/contributing.rst:7
msgid ""
"If you have an idea for new feature you should start by deciding whether "
"you want to write a plugin (see :doc:`plugin`) or to contribute the "
"feature to the ephios core code. A plugin is usually suitable if the "
"feature is very specific to a small set of users (e.g. a specific signup "
"process only used in your local organisation) or the feature is not "
"related to the core tasks of ephios (e.g. a system for stock management)."
" If all ephios users could profit from your feature, you should consider "
"contributing it to the core code. Please start by describing your feature"
" in a new issue in the GitHub repository to coordinate the extent with "
"us. When working on existing issues, please assign yourself and create a "
"pull request early on."
msgstr ""

#: ../../development/contributing.rst:16
msgid "Development setup"
msgstr ""

#: ../../development/contributing.rst:18
msgid ""
"To set up a development version on your local machine, you need to "
"execute the following steps:"
msgstr ""

#: ../../development/contributing.rst:20
msgid ""
"Check out the `repository <https://github.com/ephios-dev/ephios>`_ and cd"
" to it"
msgstr ""

#: ../../development/contributing.rst:21
msgid "Set up a virtualenv for the project with Python >=3.8 and activate it"
msgstr ""

#: ../../development/contributing.rst:22
msgid ""
"Install poetry (if not already installed): `Installation guide <https"
"://python-poetry.org/docs/#installation>`_"
msgstr ""

#: ../../development/contributing.rst:23
msgid "Install dependencies with ``poetry install``"
msgstr ""

#: ../../development/contributing.rst:24
msgid "Create env file with ``cp .env.example .env``"
msgstr ""

#: ../../development/contributing.rst:25
msgid "Migrate the database with ``python manage.py migrate``"
msgstr ""

#: ../../development/contributing.rst:26
msgid ""
"Compile translations with ``python manage.py compilemessages`` and "
"``python manage.py compilejsi18n``"
msgstr ""

#: ../../development/contributing.rst:27
msgid "Load data for testing with ``python manage.py setupdata debug``"
msgstr ""

#: ../../development/contributing.rst:28
msgid "Start the development server with ``python manage.py runserver``"
msgstr ""

#: ../../development/contributing.rst:29
msgid ""
"Open your web browser, visit ``http://localhost:8000`` and log in with "
"the default credentials (user ``admin@localhost`` and password ``admin``)"
msgstr ""

#: ../../development/contributing.rst:32
msgid "Tests"
msgstr ""

#: ../../development/contributing.rst:34
msgid ""
"We are using `pytest <https://docs.pytest.org/en/stable/>`_ along with "
"`django-webtest <https://github.com/django-webtest/django-webtest>`_. "
"Please write tests for new features or fixed bugs. You can use your IDE "
"integration to run the tests or execute the whole test suite with "
"``pytest``."
msgstr ""

#: ../../development/contributing.rst:39
msgid "Code style"
msgstr ""

#: ../../development/contributing.rst:41
msgid ""
"We are enforcing a good code style for every pull request. To ensure that"
" you only commit appropriate code, we recommend installing a pre-commit "
"hook with ``pre-commit install``. You can have a look at ``.pre-commit-"
"config.yaml`` to check how this works. In short it executes the following"
" steps before every commit:"
msgstr ""

#: ../../development/contributing.rst:45
msgid "run ``autoflake`` with a couple of flags to remove unused imports,"
msgstr ""

#: ../../development/contributing.rst:46
msgid "run ``isort .`` to sort imports,"
msgstr ""

#: ../../development/contributing.rst:47
msgid "run ``black .`` to format the code."
msgstr ""

#: ../../development/contributing.rst:49
msgid ""
"If you want to do that manually, run ``pre-commit run --all-files``. Next"
" to that, we also run ``pylint ephios`` to check for semantic issues in "
"the code."
msgstr ""

#: ../../development/index.rst:2
msgid "Development guide"
msgstr ""

#: ../../development/index.rst:4
msgid "This section shows how to contribute to ephios and how to develop plugins."
msgstr ""

#: ../../development/plugin.rst:2
msgid "Developing plugins for ephios"
msgstr ""

#: ../../development/plugin.rst:4
msgid "The plugin infrastructure is currently under construction."
msgstr ""


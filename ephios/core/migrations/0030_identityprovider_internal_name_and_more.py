# Generated by Django 5.0.8 on 2024-11-22 09:25

from django.db import migrations, models


def set_idp_internal_names(apps, schema_editor):
    IdentityProvider = apps.get_model("core", "IdentityProvider")
    for idp in IdentityProvider.objects.all():
        idp.internal_name = idp.label
        idp.save()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0029_alter_userprofile_date_of_birth"),
    ]

    operations = [
        migrations.AddField(
            model_name="identityprovider",
            name="internal_name",
            field=models.CharField(
                help_text="Internal name for this provider.",
                max_length=255,
                unique=False,
                verbose_name="internal name",
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="identityprovider",
            name="qualification_claim",
            field=models.CharField(
                blank=True,
                help_text="The name of the claim that contains the user's qualifications. Leave empty if your provider does not support this. You can use dot notation to access nested claims.",
                max_length=254,
                verbose_name="qualification claim",
            ),
        ),
        migrations.AddField(
            model_name="identityprovider",
            name="qualification_codename_to_uuid",
            field=models.JSONField(
                default=dict,
                blank=True,
                help_text="A json encoded dictionary containing mappings of qualification names as they appear in thequalification claim to the qualification uuid. If a key is not found, use the key directly.",
                verbose_name="qualification codename to uuid",
            ),
        ),
        migrations.AlterField(
            model_name="identityprovider",
            name="group_claim",
            field=models.CharField(
                blank=True,
                default="",
                help_text="The name of the claim that contains the user's groups. Leave empty if your provider does not support this. You can use dot notation to access nested claims.",
                max_length=254,
                verbose_name="group claim",
            ),
            preserve_default=False,
        ),
        migrations.RunPython(set_idp_internal_names),
    ]

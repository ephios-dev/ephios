# Generated by Django 4.2.4 on 2023-10-19 23:06
from django.core.exceptions import ImproperlyConfigured
from django.db import migrations, models


def migrate_oidc_provider(apps, schema_editor):
    from ephios import settings

    try:
        if settings.env.bool("ENABLE_OIDC_CLIENT"):
            IdentityProvider = apps.get_model("core", "IdentityProvider")
            db_alias = schema_editor.connection.alias
            IdentityProvider.objects.using(db_alias).create(
                label="OIDC",
                client_id=settings.env.str("OIDC_RP_CLIENT_ID"),
                client_secret=settings.env.str("OIDC_RP_CLIENT_SECRET"),
                scopes=settings.env.str("OIDC_RP_SCOPES"),
                authorization_endpoint=settings.env.str("OIDC_OP_AUTHORIZATION_ENDPOINT"),
                token_endpoint=settings.env.str("OIDC_OP_TOKEN_ENDPOINT"),
                userinfo_endpoint=settings.env.str("OIDC_OP_USER_ENDPOINT"),
                end_session_endpoint=settings.env.str("LOGOUT_REDIRECT_URL", None),
                jwks_uri=settings.env.str("OIDC_OP_JWKS_ENDPOINT", None),
            )
    except (AttributeError, KeyError, ImproperlyConfigured):
        pass


def reverse_migrate_oidc_provider(apps, schema_editor):
    IdentityProvider = apps.get_model("core", "IdentityProvider")
    db_alias = schema_editor.connection.alias
    IdentityProvider.objects.using(db_alias).filter(label="OIDC").delete()


class Migration(migrations.Migration):
    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("core", "0021_userprofile_preferred_language_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="IdentityProvider",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True, primary_key=True, serialize=False, verbose_name="ID"
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="The label displayed to users attempting to log in with this provider.",
                        max_length=255,
                        verbose_name="label",
                    ),
                ),
                (
                    "client_id",
                    models.CharField(
                        help_text="Your client id provided by the OIDC provider.",
                        max_length=255,
                        verbose_name="client id",
                    ),
                ),
                (
                    "client_secret",
                    models.CharField(
                        help_text="Your client secret provided by the OIDC provider.",
                        max_length=255,
                        verbose_name="client secret",
                    ),
                ),
                (
                    "scopes",
                    models.CharField(
                        default="openid profile email",
                        help_text="The OIDC scopes to request from the provider. Separate multiple scopes with spaces. Use the default value if you are unsure.",
                        max_length=255,
                        verbose_name="scopes",
                    ),
                ),
                (
                    "authorization_endpoint",
                    models.URLField(
                        help_text="The OIDC authorization endpoint.",
                        verbose_name="authorization endpoint",
                    ),
                ),
                (
                    "token_endpoint",
                    models.URLField(
                        help_text="The OIDC token endpoint.", verbose_name="token endpoint"
                    ),
                ),
                (
                    "userinfo_endpoint",
                    models.URLField(
                        help_text="The OIDC user endpoint.", verbose_name="user endpoint"
                    ),
                ),
                (
                    "end_session_endpoint",
                    models.URLField(
                        blank=True,
                        help_text="The OIDC end session endpoint, if supported by your provider.",
                        null=True,
                        verbose_name="end session endpoint",
                    ),
                ),
                (
                    "jwks_uri",
                    models.URLField(
                        blank=True,
                        help_text="The OIDC JWKS endpoint. A less secure signing method will be used if this is not provided.",
                        null=True,
                        verbose_name="JWKS endpoint",
                    ),
                ),
                (
                    "default_groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups that users logging in with this provider will be added to.",
                        to="auth.group",
                        verbose_name="default groups",
                    ),
                ),
            ],
        ),
        migrations.RunPython(migrate_oidc_provider, reverse_migrate_oidc_provider),
    ]

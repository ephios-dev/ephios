# Generated by Django 5.0.1 on 2024-02-09 14:46
import uuid

from django.db import migrations, models
from dynamic_preferences.registries import global_preferences_registry

import ephios.extra.json
from ephios.core.services.qualification import QualificationUniverse
from ephios.plugins.baseshiftstructures.structure.named_teams import NamedTeamsShiftStructure
from ephios.plugins.baseshiftstructures.structure.uniform import UniformShiftStructure
from ephios.plugins.basesignupflows.flow.coupled import CoupledSignupFlow
from ephios.plugins.basesignupflows.flow.manual import ManualSignupFlow
from ephios.plugins.basesignupflows.flow.participant import (
    InstantConfirmSignupFlow,
    RequestConfirmSignupFlow,
)

METHOD_TO_FLOW_AND_STRUCTURE = {
    "instant_confirmation": (InstantConfirmSignupFlow.slug, UniformShiftStructure.slug),
    "request_confirm": (RequestConfirmSignupFlow.slug, UniformShiftStructure.slug),
    "section_based": (RequestConfirmSignupFlow.slug, NamedTeamsShiftStructure.slug),
    "coupled": (CoupledSignupFlow.slug, UniformShiftStructure.slug),
    "no_selfservice": (ManualSignupFlow.slug, UniformShiftStructure.slug),
}

MEDICAL_CATEGORY_UUID = "50380292-b9c9-4711-b70d-8e03e2784cfb"


def pick_important_qualification(qualifications, Qualification):
    if not qualifications:
        return None
    if len(qualifications) == 1:
        return qualifications[0]

    class MigrationAwareQualificationUniverse(QualificationUniverse):
        @classmethod
        def get_qualifications(cls):
            return (
                Qualification.objects.all().prefetch_related("includes").select_related("category")
            )

    qualifications = Qualification.objects.filter(id__in=qualifications)
    graph = MigrationAwareQualificationUniverse().get_graph()
    has_uuids = {qualification.uuid for qualification in qualifications}
    graph.keep_only(has_uuids)
    essential_qualifications = [q for q in qualifications if q.uuid in graph.roots()]

    # as a heuristic based on what our users probably want, prefer a medical qualification
    for q in essential_qualifications:
        if q.category.uuid == MEDICAL_CATEGORY_UUID:
            return q

    # or just pick the first one
    return essential_qualifications[0]


def copy_structure_configuration_to_signup_flow_configuration(apps, schema_editor):
    Shift = apps.get_model("core", "Shift")
    AbstractParticipation = apps.get_model("core", "AbstractParticipation")
    Qualification = apps.get_model("core", "Qualification")

    for p in AbstractParticipation.objects.all():
        preferred = p.structure_data.get("preferred_section_uuid")
        dispatched = p.structure_data.get("dispatched_section_uuid")
        if preferred:
            p.structure_data["preferred_team_uuid"] = preferred
        if dispatched:
            p.structure_data["dispatched_team_uuid"] = dispatched
        p.save()

    for shift in Shift.objects.all():
        shift.signup_flow_configuration = shift.structure_configuration
        try:
            flow_slug, structure_slug = METHOD_TO_FLOW_AND_STRUCTURE[shift.signup_method_slug]
        except KeyError:
            flow_slug = "unknown-after-migration"
            structure_slug = "unknown-after-migration"
        shift.signup_flow_slug = flow_slug
        shift.structure_slug = structure_slug

        # special cases
        if shift.signup_method_slug == "section_based":
            # rename sections to teams and qualification key etc.
            sections_config = shift.structure_configuration
            teams = []
            for section in sections_config.get("sections", []):
                # teams can only require a single qualification, pick something sensible
                qualification = pick_important_qualification(
                    section.get("qualifications", []), Qualification
                )
                teams.append(
                    {
                        "title": section.get("title", ""),
                        "uuid": section.get("uuid", uuid.uuid4()),
                        "min_count": section.get("min_count", 1),
                        "max_count": section.get("max_count", None),
                        "qualification": qualification,
                    }
                )

            shift.structure_configuration = {
                "choose_preferred_team": sections_config.get("choose_preferred_section", False),
                "teams": teams,
            }

        shift.save()


def enable_new_plugins(apps, schema_editor):
    preferences = global_preferences_registry.manager()
    enabled_plugins = preferences["general__enabled_plugins"]
    if "ephios.plugins.basesignup" in enabled_plugins:
        enabled_plugins.remove("ephios.plugins.basesignup")
    preferences["general__enabled_plugins"] = list(
        set(enabled_plugins)
        | {
            "ephios.plugins.basesignupflows",
            "ephios.plugins.baseshiftstructures",
            "ephios.plugins.complexsignup",
        }
    )


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0026_userprofile_disabled_notifications_and_more"),
    ]

    operations = [
        migrations.RenameField(
            model_name="abstractparticipation",
            old_name="data",
            new_name="structure_data",
        ),
        migrations.AddField(
            model_name="shift",
            name="signup_flow_slug",
            field=models.SlugField(default="fallback", verbose_name="signup flow"),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="shift",
            name="structure_slug",
            field=models.SlugField(default="fallback", verbose_name="structure"),
            preserve_default=False,
        ),
        migrations.RenameField(
            model_name="shift",
            old_name="signup_configuration",
            new_name="structure_configuration",
        ),
        migrations.AddField(
            model_name="shift",
            name="signup_flow_configuration",
            field=models.JSONField(
                decoder=ephios.extra.json.CustomJSONDecoder,
                default=dict,
                encoder=ephios.extra.json.CustomJSONEncoder,
            ),
        ),
        migrations.RunPython(
            copy_structure_configuration_to_signup_flow_configuration, migrations.RunPython.noop
        ),
        migrations.RunPython(enable_new_plugins, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="shift",
            name="signup_method_slug",
        ),
    ]
